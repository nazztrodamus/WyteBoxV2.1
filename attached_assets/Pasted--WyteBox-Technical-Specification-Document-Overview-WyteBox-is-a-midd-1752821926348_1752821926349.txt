





WyteBox
Technical Specification Document









Overview
WyteBox is a middleware application that acts as a secure and auditable bridge between Microsoft Dynamics API and ZRA's VSDC API. It handles data reception, validation, transformation, storage, synchronization, and logging. It features a professional and modern UI built with React, using Lucide icons, and stores data using SQLite.
Architecture
Core Modules
1.	API Gateway
o	Receives JSON payloads from Dynamics
o	Sends/receives JSON to/from VSDC
o	Includes security validation headers
2.	SQLite Engine
o	Stores all data dynamically: Items, Customers, Invoices, Logs, etc.
3.	UI Application
o	Clean modern interface for configuration, monitoring, and manual operations
4.	Sync Engine
o	Handles automatic data syncs with VSDC
5.	Logger
o	Tracks every system event (API call, DB save, error, etc.)
________________________________________
Modules & Screens
1. Dashboard
Purpose: Overview of system health and key stats
‚Ä¢	System Status: VSDC Connected / Internet OK
‚Ä¢	Initialization State
‚Ä¢	Summary:
ÔÉò	Items
ÔÉò	Customers
ÔÉò	Invoices
ÔÉò	Purchases / Imports
‚Ä¢	System Performance (basic metrics)
‚Ä¢	Recent Activity (last 10 logs)
2. Device Initialization
Purpose: Initialize connection to VSDC
‚Ä¢	Fields:
ÔÉò	TPIN
ÔÉò	Branch ID
ÔÉò	Device Serial Number
‚Ä¢	Action:
ÔÉò	Init button triggers POST /initializer/selectInitInfo
‚Ä¢	On success, saves data and sets VSDC status to Connected
3. Sync Settings
Each sub-feature has its own page and uses the following model:
‚Ä¢	Last Sync Timestamp
‚Ä¢	Total Items Synced
‚Ä¢	Manual Sync Trigger
‚Ä¢	Daily Sync Job
a. Get Standard Codes
Endpoint: /code/selectCodes
b. Get Classification Codes
Endpoint: /itemClass/selectItemsClass
c. Get Notices
Endpoint: /notices/selectNotices
d. Get Branches
Endpoint: /branches/selectBranches
e. Save Branch User
‚Ä¢	Form to create user
‚Ä¢	POST to /branches/saveBrancheUser
‚Ä¢	Saved with Boolean = 0; on resultCd = 000, set to 1
‚Ä¢	Resubmission and error viewing supported
f. Get Customers
Endpoint: /customers/selectCustomer
g. Save Customers
‚Ä¢	Form input
‚Ä¢	POST /branches/saveBrancheCustomers
‚Ä¢	Similar logic as Save Branch User
4. Items
Purpose: View, filter, sync, and manage inventory
‚Ä¢	Receive from Dynamics: /api/items/submit
‚Ä¢	Validate JSON structure
‚Ä¢	Check if item exists (by itemCd)
‚Ä¢	Save to DB (Boolean 0), send to /items/saveItem
‚Ä¢	On resultCd = 000, respond success, set Boolean 1
‚Ä¢	On error: respond with error and keep Boolean 0
‚Ä¢	Include stock management
5. View Invoices
Types: Sales, Credit Note, Purchase, Partial Credit Note
‚Ä¢	Receive via /api/invoice/submit
‚Ä¢	Validate payload
‚Ä¢	Check item IDs exist + stock check (skip for services)
‚Ä¢	Save to DB (Boolean 0)
‚Ä¢	Send to VSDC
o	Example endpoints:
ÔÇß	/trnsSales/saveSales
ÔÇß	/trnsSales/saveCreditNote
ÔÇß	/trnsSales/saveFinalInvoice
‚Ä¢	Response:
o	resultCd == 000: save VSDC data, respond with receipt & QR
o	resultCd != 000: log error, respond with message
o	No response: respond "VSDC not reachable" and delete record
‚Ä¢	Update stock after success + sync to VSDC stock endpoints
6. Reports
‚Ä¢	Invoice Reports
o	Sales / Credit / Purchase
‚Ä¢	Items Reports
o	Stock report
‚Ä¢	Export to Excel/PDF
‚Ä¢	Search and filter
7. Imports & Purchases
‚Ä¢	Daily Sync from VSDC:
o	/imports/selectImportList
o	/purchases/selectPurchaseList
‚Ä¢	Save to DB with status: Unprocessed, Approved, Rejected
‚Ä¢	Approval Process:
o	Ensure item exists in DB
o	If not: block and show error
o	If matchable: allow user to map ItemNm
o	On approval: update DB stock, send:
ÔÇß	/stocks/saveStockItem
ÔÇß	/stocks/saveStockMaster
o	Log the reason for stock update
8. Logs
‚Ä¢	Log Types: Success, Error, Submission, Export, Change
‚Ä¢	Tracked Fields:
o	Event Name
o	Endpoint
o	Payload
o	Response
o	Timestamp
o	Status
‚Ä¢	Searchable / Exportable
9. Settings
‚Ä¢	Configure:
o	VSDC Base URL
o	Header Key
o	VSDC Endpoints
o	Cron sync settings
‚Ä¢	Set API Key for Dynamics Header Verification
________________________________________
Communication Endpoints
üîÅ Dynamics ‚Üí WyteBox
/api/items/submit
Payload:
{
  "itemCd": "P001",
  "itemNm": "Panadol",
  "qty": 10,
  "clsCode": "43191501",
  "pkgUnitCd": "BOX",
  "qtyUnitCd": "U",
  "vatCatCd": "A",
  "price": 15.5,
  "origin": "ZM"
}
Response:
‚Ä¢	{"status": "exists"}
‚Ä¢	{"status": "error", "message": "Missing xyz"}
‚Ä¢	{"status": "success"}
________________________________________
/api/invoice/submit
Payload:
{
  "invoiceNo": "INV001",
  "invoiceType": "SALE",
  "customerTpin": "2000000000",
  "branchId": "000",
  "items": [
    {"itemCd": "P001", "qty": 2, "unitPrice": 15.5}
  ],
  "totalAmount": 31.0,
  "dateIssued": "2025-07-14T08:00:00Z"
}
Response:
‚Ä¢	Success:
{
  "status": "success",
  "data": {
    "rcptNo": 1,
    "intrlData": "QHRQAUCJVLRSLSFYVLFYN4FHR4",
    "rcptSign": "BSFCQEFAAVTC4B3D",
    "vsdcRcptPbctDate": "20250425144131",
    "sdcId": "SDC0010002520",
    "mrcNo": "WIS00003489",
    "qrCodeUrl": "https://sandboxportal.zra.org.zm/common/link/ebm/receipt/indexEbmReceiptData?Data=2001179764000BSFCQEFAAVTC4B3D"
  }
}
‚Ä¢	Failure: {"status": "error", "message": "Item does not exist or stock insufficient"}
‚Ä¢	VSDC unreachable: {"status": "error", "message": "VSDC not reachable"}
________________________________________
üîÅ WyteBox ‚Üí VSDC
Device Initialization
‚Ä¢	Endpoint: /initializer/selectInitInfo
‚Ä¢	Payload:
{
  "tpin": "1000000000",
  "bhfId": "000",
  "dvcSrlNo": "20180520000000"
}
Standard Codes
‚Ä¢	Endpoint: /code/selectCodes
‚Ä¢	Payload:
{
  "tpin": "1000000000",
  "bhfId": "000",
  "lastReqDt": "20231215000000"
}
Classification Codes
‚Ä¢	Endpoint: /itemClass/selectItemsClass
‚Ä¢	Similar payload structure as above
Save Item
‚Ä¢	Endpoint: /items/saveItem
‚Ä¢	Payload from WyteBox DB transformed JSON
Save Sales Invoice
‚Ä¢	Endpoint: /trnsSales/saveSales
‚Ä¢	Payload:
{
  "tpin": "1000000000",
  "bhfId": "000",
  "custTpin": "2000000000",
  "itemList": [...],
  "totalAmt": 500,
  ...
}
Save Stock
‚Ä¢	Endpoints:
o	/stocks/saveStockItem
o	/stocks/saveStockMaster
‚Ä¢	Payload includes updated stock quantities per item
________________________________________
Database Structure (SQLite)
Each major section will have its own table with auto-generated structure:
‚Ä¢	items
‚Ä¢	invoices
‚Ä¢	purchases
‚Ä¢	imports
‚Ä¢	logs
‚Ä¢	settings
‚Ä¢	customers
‚Ä¢	branch_users
‚Ä¢	stock_transactions
________________________________________
Security
‚Ä¢	Every payload from Dynamics must include header:
Authorization: Bearer <secure_key>
‚Ä¢	WyteBox strips and verifies this header before accepting data
________________________________________
UI
‚Ä¢	Built with React + Lucide icons
‚Ä¢	Responsive, clean layout
‚Ä¢	Top Nav:
o	VSDC Status: Green/Red
o	Internet Check: Green/Red
‚Ä¢	Side Nav:
o	Dashboard
o	Device Init
o	Sync Settings
o	Items
o	View Invoices
o	Reports
o	Imports
o	Purchases
o	Logs
o	Settings

